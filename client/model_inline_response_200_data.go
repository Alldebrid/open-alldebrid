/*
Alldebrid API

Welcome to the OpenAPI Alldebrid API v4 !<br /> You can use this API to access various Alldebrid services from custom applications or scripts.<br /> <br /> API is organized around REST,<br /> returns JSON-encoded responses and use standard HTTP response codes.<br /> <br /> All calls are to be made on the HTTPS endpoints.<br /> Some are public, others require to be authentificated with an apikey (see Authentication).<br /> <br /> You must also identify your apps or script with a meaningfull agent parameter.<br /> <br /> This API version is namespaced as v4, as such all endpoint start with /v4/,<br /> such like http://api.alldebrid.com/v4/ping?agent=apiShowcase.<br /> <br /> This API v4 should be the final version regarding general response format and errors (hopefully).<br />

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse200Data struct for InlineResponse200Data
type InlineResponse200Data struct {
	Hosts *map[string]InlineResponse200DataHosts `json:"hosts,omitempty"`
	Streams *map[string]InlineResponse200DataStreams `json:"streams,omitempty"`
	Redirectors *map[string]InlineResponse200DataRedirectors `json:"redirectors,omitempty"`
}

// NewInlineResponse200Data instantiates a new InlineResponse200Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200Data() *InlineResponse200Data {
	this := InlineResponse200Data{}
	return &this
}

// NewInlineResponse200DataWithDefaults instantiates a new InlineResponse200Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200DataWithDefaults() *InlineResponse200Data {
	this := InlineResponse200Data{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetHosts() map[string]InlineResponse200DataHosts {
	if o == nil || o.Hosts == nil {
		var ret map[string]InlineResponse200DataHosts
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetHostsOk() (*map[string]InlineResponse200DataHosts, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given map[string]InlineResponse200DataHosts and assigns it to the Hosts field.
func (o *InlineResponse200Data) SetHosts(v map[string]InlineResponse200DataHosts) {
	o.Hosts = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetStreams() map[string]InlineResponse200DataStreams {
	if o == nil || o.Streams == nil {
		var ret map[string]InlineResponse200DataStreams
		return ret
	}
	return *o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetStreamsOk() (*map[string]InlineResponse200DataStreams, bool) {
	if o == nil || o.Streams == nil {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasStreams() bool {
	if o != nil && o.Streams != nil {
		return true
	}

	return false
}

// SetStreams gets a reference to the given map[string]InlineResponse200DataStreams and assigns it to the Streams field.
func (o *InlineResponse200Data) SetStreams(v map[string]InlineResponse200DataStreams) {
	o.Streams = &v
}

// GetRedirectors returns the Redirectors field value if set, zero value otherwise.
func (o *InlineResponse200Data) GetRedirectors() map[string]InlineResponse200DataRedirectors {
	if o == nil || o.Redirectors == nil {
		var ret map[string]InlineResponse200DataRedirectors
		return ret
	}
	return *o.Redirectors
}

// GetRedirectorsOk returns a tuple with the Redirectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse200Data) GetRedirectorsOk() (*map[string]InlineResponse200DataRedirectors, bool) {
	if o == nil || o.Redirectors == nil {
		return nil, false
	}
	return o.Redirectors, true
}

// HasRedirectors returns a boolean if a field has been set.
func (o *InlineResponse200Data) HasRedirectors() bool {
	if o != nil && o.Redirectors != nil {
		return true
	}

	return false
}

// SetRedirectors gets a reference to the given map[string]InlineResponse200DataRedirectors and assigns it to the Redirectors field.
func (o *InlineResponse200Data) SetRedirectors(v map[string]InlineResponse200DataRedirectors) {
	o.Redirectors = &v
}

func (o InlineResponse200Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Streams != nil {
		toSerialize["streams"] = o.Streams
	}
	if o.Redirectors != nil {
		toSerialize["redirectors"] = o.Redirectors
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200Data struct {
	value *InlineResponse200Data
	isSet bool
}

func (v NullableInlineResponse200Data) Get() *InlineResponse200Data {
	return v.value
}

func (v *NullableInlineResponse200Data) Set(val *InlineResponse200Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200Data(val *InlineResponse200Data) *NullableInlineResponse200Data {
	return &NullableInlineResponse200Data{value: val, isSet: true}
}

func (v NullableInlineResponse200Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



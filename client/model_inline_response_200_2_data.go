/*
Alldebrid API

Welcome to the OpenAPI Alldebrid API v4 !<br /> You can use this API to access various Alldebrid services from custom applications or scripts.<br /> <br /> API is organized around REST,<br /> returns JSON-encoded responses and use standard HTTP response codes.<br /> <br /> All calls are to be made on the HTTPS endpoints.<br /> Some are public, others require to be authentificated with an apikey (see Authentication).<br /> <br /> You must also identify your apps or script with a meaningfull agent parameter.<br /> <br /> This API version is namespaced as v4, as such all endpoint start with /v4/,<br /> such like http://api.alldebrid.com/v4/ping?agent=apiShowcase.<br /> <br /> This API v4 should be the final version regarding general response format and errors (hopefully).<br />

API version: 4.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InlineResponse2002Data struct for InlineResponse2002Data
type InlineResponse2002Data struct {
	Hosts *map[string]int64 `json:"hosts,omitempty"`
}

// NewInlineResponse2002Data instantiates a new InlineResponse2002Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002Data() *InlineResponse2002Data {
	this := InlineResponse2002Data{}
	return &this
}

// NewInlineResponse2002DataWithDefaults instantiates a new InlineResponse2002Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002DataWithDefaults() *InlineResponse2002Data {
	this := InlineResponse2002Data{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *InlineResponse2002Data) GetHosts() map[string]int64 {
	if o == nil || o.Hosts == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002Data) GetHostsOk() (*map[string]int64, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *InlineResponse2002Data) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given map[string]int64 and assigns it to the Hosts field.
func (o *InlineResponse2002Data) SetHosts(v map[string]int64) {
	o.Hosts = &v
}

func (o InlineResponse2002Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2002Data struct {
	value *InlineResponse2002Data
	isSet bool
}

func (v NullableInlineResponse2002Data) Get() *InlineResponse2002Data {
	return v.value
}

func (v *NullableInlineResponse2002Data) Set(val *InlineResponse2002Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002Data(val *InlineResponse2002Data) *NullableInlineResponse2002Data {
	return &NullableInlineResponse2002Data{value: val, isSet: true}
}

func (v NullableInlineResponse2002Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


